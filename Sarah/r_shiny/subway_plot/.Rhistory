lon_coord = stop[stop$stop_lon]
head(lon_coord)
stop$stop_lon <- as.numeric(stop$stop_lon)
head(stop$stop_lon)
stop$stop_lon <- as.numeric(stop$stop_lon)
lon_coord = stop[stop$stop_lon]
head(stop$stop_lon)
stop[5] <- as.numeric(stop[5])
lat_coord = stop[5]
head(lat_coord)
stop_df = data.frame(lon = lon_coord,lat = lat_coord )
summary(stop_df)
shape$shape_id <- as.character(shape$shape_id)
ids <- unique(shape$shape_id)
shape_orig <- shape
stop_df = data.frame(lon = lon_coord,lat = lat_coord )
summary(stop_df)
stop$stop_lon <- as.numeric(stop$stop_lon)
lons = stop$stop_lon
head(lons)
head(lats)
head(lats)
stop[5] <- as.numeric(stop[5])
lats = stop[5]
stop$stop_lat <- as.numeric(stop$stop_lat)
lats = stop$stop_lat
head(lats)
stop_coord = data.frame(lon = lons,lat = lats )
summary(stop_coord)
shape$shape_id <- as.character(shape$shape_id)
ids <- unique(shape$shape_id)
shape_orig <- shape
for(i in 1:10){
shape <- shape_orig[shape_orig$shape_id == ids[i],]
shape_map <- list(x = shape$shape_pt_lon, y = shape$shape_pt_lat)
shape_temp <- map2SpatialLines(shape_map, IDs = ids[i])
shape_lines <- spRbind(shape_lines, shape_temp)
}
leaflet() %>%
addTiles() %>%
addPolylines(data = shape_lines)
addCircles(data = stop_coord, lat = ~ lat lng = ~ lon)
for(i in 1:10){
shape <- shape_orig[shape_orig$shape_id == ids[i],]
shape_map <- list(x = shape$shape_pt_lon, y = shape$shape_pt_lat)
shape_temp <- map2SpatialLines(shape_map, IDs = ids[i])
shape_lines <- spRbind(shape_lines, shape_temp)
}
leaflet() %>%
addTiles() %>%
addPolylines(data = shape_lines)
addCircles(data = stop_coord, lat = ~ lat, lng = ~ lon)
?spRbind
library(leaflet)
library(maptools)
library(maps)
library(shiny)
for(i in 1:10){
shape <- shape_orig[shape_orig$shape_id == ids[i],]
shape_map <- list(x = shape$shape_pt_lon, y = shape$shape_pt_lat)
shape_temp <- map2SpatialLines(shape_map, IDs = ids[i])
shape_lines <- spRbind(shape_lines, shape_temp)
}
leaflet() %>%
addTiles() %>%
addPolylines(data = shape_lines)
addCircles(data = stop_coord, lat = ~ lat, lng = ~ lon)
for(i in 1:10){
shape <- shape_orig[shape_orig$shape_id == ids[i],]
shape_map <- list(x = shape$shape_pt_lon, y = shape$shape_pt_lat)
shape_temp <- map2SpatialLines(shape_map, IDs = ids[i])
shape_lines <- spRbind(shape_lines, shape_temp)
}
leaflet() %>%
addTiles() %>%
addPolylines(data = shape_lines)
shape$shape_id <- as.character(shape$shape_id)
ids <- unique(shape$shape_id)
shape_orig <- shape
for(i in 1:10){
shape <- shape_orig[shape_orig$shape_id == ids[i],]
shape_map <- list(x = shape$shape_pt_lon, y = shape$shape_pt_lat)
shape_temp <- map2SpatialLines(shape_map, IDs = ids[i])
shape_lines <- spRbind(shape_lines, shape_temp)
}
leaflet() %>%
addTiles() %>%
addPolylines(data = shape_lines)
for(i in 1:10){
shape <- shape_orig[shape_orig$shape_id == ids[i],]
shape_map <- list(x = shape$shape_pt_lon, y = shape$shape_pt_lat)
shape_temp <- map2SpatialLines(shape_map, IDs = ids[i])
#shape_lines <- spRbind(shape_lines, shape_temp)
}
leaflet() %>%
addTiles() %>%
addPolylines(data = shape_lines)
addCircles(data = stop_coord, lat = ~ lat, lng = ~ lon)
for(i in 1:10){
shape <- shape_orig[shape_orig$shape_id == ids[i],]
shape_map <- list(x = shape$shape_pt_lon, y = shape$shape_pt_lat)
shape_temp <- map2SpatialLines(shape_map, IDs = ids[i])
#shape_lines <- spRbind(shape_lines, shape_temp)
}
leaflet() %>%
addTiles() %>%
addPolylines(data = shape_lines)
for(i in 1:10){
shape <- shape_orig[shape_orig$shape_id == ids[i],]
shape_map <- list(x = shape$shape_pt_lon, y = shape$shape_pt_lat)
shape_temp <- map2SpatialLines(shape_map, IDs = ids[i])
#shape_lines <- spRbind(shape_lines, shape_temp)
}
leaflet() %>%
addTiles() %>%
addPolylines(data = shape_temp)
addCircles(data = stop_coord, lat = ~ lat, lng = ~ lon)
stop_coord = data.frame(lons = lons,lats = lats )
summary(stop_coord)
shape$shape_id <- as.character(shape$shape_id)
ids <- unique(shape$shape_id)
shape_orig <- shape
for(i in 1:10){
shape <- shape_orig[shape_orig$shape_id == ids[i],]
shape_map <- list(x = shape$shape_pt_lon, y = shape$shape_pt_lat)
shape_temp <- map2SpatialLines(shape_map, IDs = ids[i])
#shape_lines <- spRbind(shape_lines, shape_temp)
}
leaflet() %>%
addTiles() %>%
addPolylines(data = shape_temp)
addCircles(data = stop_coord, lat = ~ lat, lng = ~ lon)
for(i in 1:10){
shape <- shape_orig[shape_orig$shape_id == ids[i],]
shape_map <- list(x = shape$shape_pt_lon, y = shape$shape_pt_lat)
shape_temp <- map2SpatialLines(shape_map, IDs = ids[i])
#shape_lines <- spRbind(shape_lines, shape_temp)
}
leaflet() %>%
addTiles() %>%
addPolylines(data = shape_temp)
addCircles(data = stop_coord, lat = ~ lats, lng = ~ lons)
for(i in 1:10){
shape <- shape_orig[shape_orig$shape_id == ids[i],]
shape_map <- list(x = shape$shape_pt_lon, y = shape$shape_pt_lat)
shape_temp <- map2SpatialLines(shape_map, IDs = ids[i])
#shape_lines <- spRbind(shape_lines, shape_temp)
}
leaflet() %>%
addTiles() %>%
addPolylines(data = shape_temp)
addCircleMarkers(data = stop_coord, lat = ~ lats, lng = ~ lons)
length(ids)
ids <- unique(shape$shape_id)
summary(shape)
shape$shape_id <- as.character(shape$shape_id)
ids <- unique(shape$shape_id)
length(ids)
shape$shape_id
shape <- read.csv('/Users/sarahcha/Documents/W205/final_project/google_transit/shapes.txt')
stop <- read.csv('/Users/sarahcha/Documents/W205/final_project/google_transit/stops.txt')
stop$stop_lon <- as.numeric(stop$stop_lon)
lons = stop$stop_lon
head(lons)
stop$stop_lat <- as.numeric(stop$stop_lat)
lats = stop$stop_lat
head(lats)
stop_coord = data.frame(lons = lons,lats = lats )
summary(stop_coord)
shape$shape_id
ids <- unique(shape$shape_id)
shape_orig <- shape
length(ids)
for(i in 1:10){
shape <- shape_orig[shape_orig$shape_id == ids[i],]
shape_map <- list(x = shape$shape_pt_lon, y = shape$shape_pt_lat)
shape_temp <- map2SpatialLines(shape_map, IDs = ids[i])
#shape_lines <- spRbind(shape_lines, shape_temp)
}
leaflet() %>%
addTiles() %>%
addPolylines(data = shape_temp)
addCircleMarkers(data = stop_coord, lat = ~ lats, lng = ~ lons)
leaflet() %>%
addTiles() %>%
addPolylines(data = shape_temp)
addCircles(data = stop_coord, lat = ~ lats, lng = ~ lons)
stop_coord[complete.cases(stop_coord), ]
for(i in 1:10){
shape <- shape_orig[shape_orig$shape_id == ids[i],]
shape_map <- list(x = shape$shape_pt_lon, y = shape$shape_pt_lat)
shape_temp <- map2SpatialLines(shape_map, IDs = ids[i])
#shape_lines <- spRbind(shape_lines, shape_temp)
}
leaflet() %>%
addTiles() %>%
addPolylines(data = shape_temp)
addCircles(data = stop_coord, lat = ~ lats, lng = ~ lons)
?addCircles
for(i in 1:10){
shape <- shape_orig[shape_orig$shape_id == ids[i],]
shape_map <- list(x = shape$shape_pt_lon, y = shape$shape_pt_lat)
shape_temp <- map2SpatialLines(shape_map, IDs = ids[i])
#shape_lines <- spRbind(shape_lines, shape_temp)
}
m <- leaflet() %>%
addTiles() %>%
addPolylines(data = shape_temp)
m %>% addCircles(data = stop_coord, lat = ~ lats, lng = ~ lons)
stops = stop$stop_id
head(stops)
stop_coord = data.frame(stop_id= stops, lons = lons,lats = lats )
stop_coord[complete.cases(stop_coord), ]
stop_coord = data.frame(stop= stop_id, lons = lons,lats = lats )
stop_coord[complete.cases(stop_coord), ]
updates_df = data.frame(stop_ids = stop_ids, counter = seq(0,0,length.out=length(stop_ids)))
updates <- read.csv('/Users/sarahcha/Documents/W205/final_project/batch_data/trip_update.csv')
stop_ids <- unique(updates$stop_id)
updates$arrival_delay <- as.numeric(updates$arrival_delay)
departure$arrival_delay <- as.numeric(updates$departure_delay)
updates$arrival_delay <- as.numeric(updates$arrival_delay)
updates$departure_delay <- as.numeric(updates$departure_delay)
updates_df = data.frame(unique_stop = stop_ids, counter = seq(0,0,length.out=length(stop_ids)))
print(updates_df)
updates <- read.csv('/Users/sarahcha/Documents/W205/final_project/batch_data/trip_update1.csv')
updates <- read.csv('/Users/sarahcha/Documents/W205/final_project/batch_data/trip_update1.numbers')
updates_df[unique_stop == '114N'][counter] += 1
head(updates_df)
updates_df[unique_stop == '114N'][counter] <= updates_df[unique_stop == '114N'][counter] +1
head(updates_df)
updates_df[unique_stop == '114N'][counter]
updates_df[unique_stop == 114N][counter]
updates_df[updates_df$unique_stop == '114N'][counter]
updates_df[updates_df$unique_stop == '114N'][updates$counter]
updates_df['unique_stop' == '114N']['counter']
updates_df['unique_stop' == '114N', 'counter'] <- 1
head(updates_df)
updates_df['unique_stop' == '114N', 2] <- 1
head(updates_df)
updates_df[updates_df$unique_stop == '114N', 2] <- 1
head(updates_df)
updates_df[updates_df$unique_stop == '114N', 2] <- 0
for(stop in len(stop_ids)){
counter = 0
delay_time = 0
subset = updates[updates$stop_id == stop, ]
for(x in subset){
if subset$arrival_delay[x] > 0:
updates_df[updates_df$unique_stop == stop, 2] <- updates_df[updates_df$unique_stop == stop, 2] + 1
#updates_df[unique_stop == stop][delay_time] += subset$arrival_delay[x]
if subset$departure_delay[x] > 0:
updates_df[updates_df$unique_stop == stop, 2] <- updates_df[updates_df$unique_stop == stop, 2] + 1
#updates_df[unique_stop == stop][delay_time] += subset$arrival_delay[x]
}
}
subset = updates[updates$stop_id == stop, ]
for(stop in len(stop_ids)){
subset = updates_df[update_dfs$stop_id == stop, ]
for(x in subset){
if subset$arrival_delay[x] > 0:
for(x in len(subset)){
if subset$arrival_delay[x] > 0:
updates_df[updates_df$unique_stop == stop, 2] <- updates_df[updates_df$unique_stop == stop, 2] + 1
#updates_df[unique_stop == stop][delay_time] += subset$arrival_delay[x]
if subset$departure_delay[x] > 0:
updates_df[updates_df$unique_stop == stop, 2] <- updates_df[updates_df$unique_stop == stop, 2] + 1
#updates_df[unique_stop == stop][delay_time] += subset$arrival_delay[x]
}
head(updates_df)
for(stop in len(stop_ids)){
subset = updates_df[update_dfs$stop_id == stop, ]
print(subset)
nrows(updates_df)
head(updates_df)
nrows(updates_df)
head(stop_coord)
find_coord <- function(unique_stop){
lat = stop_coord[stop_coord$stop_id == stop_id][3]
lon = stop_coord[stop_coord$stop_id == stop_id][2]
return lat, lon
}
find_lat <- function(unique_stop){
lat = stop_coord[stop_coord$stop_id == stop_id][3]
lon = stop_coord[stop_coord$stop_id == stop_id][2]
return (lat, lon)
}
updates_df["lat_coord"] <- apply(updates_df[1], 1, find_coord[1])
updates_df["lon_coord"] <- apply(updates_df[1], 1, find_coord[2])
find_coord <- function(unique_stop){
lat = stop_coord[stop_coord$stop_id == stop_id][3]
lon = stop_coord[stop_coord$stop_id == stop_id][2]
return (lat, lon)
}
updates_df["lat_coord"] <- apply(updates_df[1], 1, find_coord[1])
updates_df["lon_coord"] <- apply(updates_df[1], 1, find_coord[2])
updates_df = data.frame(unique_stop = stop_ids, lat_coord = seq(0,0,length.out=length(stop_ids)), lon_coord = seq(0,0,length.out=length(stop_ids)), counter = seq(0,0,length.out=length(stop_ids)), delay_time = seq(0,0,length.out=length(stop_ids)))
#updates_df[updates_df$unique_stop == '114N', 2] <- 0
find_coord <- function(unique_stop){
lat = stop_coord[stop_coord$stop_id == stop_id][3]
lon = stop_coord[stop_coord$stop_id == stop_id][2]
return (lat, lon)
}
updates_df["lat_coord"] <- apply(updates_df[1], 1, find_coord[1])
updates_df["lon_coord"] <- apply(updates_df[1], 1, find_coord[2])
find_lat <- function(unique_stop){
lat = stop_coord[stop_coord$stop_id == stop_id][3]
return (lat)
}
find_lon <- function(unique_stop){
lon = stop_coord[stop_coord$stop_id == stop_id][2]
return (lon)
}
updates_df["lat_coord"] <- apply(updates_df[1], 1, find_lat)
updates_df["lon_coord"] <- apply(updates_df[1], 1, find_lon)
find_lat <- function(unique_stop){
lat = stop_coord[stop_coord$stop_id == unique_stop][3]
return (lat)
}
find_lon <- function(unique_stop){
lon = stop_coord[stop_coord$stop_id == unique_stop][2]
return (lon)
}
}
updates_df["lat_coord"] <- apply(updates_df[1], 1, find_lat)
updates_df["lon_coord"] <- apply(updates_df[1], 1, find_lon)
find_lat <- function(unique_stop){
lat = stop_coord[stop_coord$stop == unique_stop][3]
return (lat)
}
find_lon <- function(unique_stop){
lon = stop_coord[stop_coord$stop == unique_stop][2]
return (lon)
}
updates_df["lat_coord"] <- apply(updates_df[1], 1, find_lat)
updates_df["lon_coord"] <- apply(updates_df[1], 1, find_lon)
stop_coord[stop_coord$stop_id == '101'][2]
stop_coord[stop_coord$stop_id == '101', 2]
find_lat <- function(unique_stop){
lat = stop_coord[stop_coord$stop_id == unique_stop, 3]
return (lat)
}
find_lon <- function(unique_stop){
lon = stop_coord[stop_coord$stop_id == unique_stop, 2]
return (lon)
}
updates_df["lat_coord"] <- apply(updates_df[1], 1, find_lat)
updates_df["lon_coord"] <- apply(updates_df[1], 1, find_lon)
head(updates_df)
head(updates)
updates <- read.csv('/Users/sarahcha/Documents/W205/final_project/batch_data/trip_update.csv')
unique_stop_ids <- unique(updates$stop_id)
updates$arrival_delay <- as.numeric(updates$arrival_delay)
updates$departure_delay <- as.numeric(updates$departure_delay)
##create a dataframe that will have stop id, coordinates + updates
updates_df = data.frame(unique_stop = unique_stop_ids, lat_coord = seq(0,0,length.out=length(stop_ids)), lon_coord = seq(0,0,length.out=length(stop_ids)), counter = seq(0,0,length.out=length(stop_ids)), delay_time = seq(0,0,length.out=length(stop_ids)))
##functions to map coordinates to each of the stops
find_lat <- function(unique_stop){
lat = stop_coord[stop_coord$stop_id == unique_stop, 3]
return (lat)
}
find_lon <- function(unique_stop){
lon = stop_coord[stop_coord$stop_id == unique_stop, 2]
return (lon)
}
updates_df["lat_coord"] <- apply(updates_df[1], 1, find_lat)
updates_df["lon_coord"] <- apply(updates_df[1], 1, find_lon)
head(updates)
library(data.table)
install.packages('data.table')
library(data.table)
real_time_data_table =data.table(updates)
real_time_data_table_adj = real_time_data_table[, list(train_queue = sum (arrival_delay, departure_delay), freq = .N), by = c("stop_id")]
head(real_time_data_table_adj)
real_time_data_table =data.table(updates)
real_time_data_table_adj = real_time_data_table[, list(train_queue = sum (arrival_delay > 0 , departure_delay > 0 ), freq = .N), by = c("stop_id")]
head(real_time_data_table_adj)
real_time_data_table =data.table(updates)
real_time_data_table_adj = real_time_data_table[, list(train_queue = sum (arrival_delay > 0 , departure_delay > 0 ), freq = count(train_queue)), by = c("stop_id")]
real_time_data_table =data.table(updates)
real_time_data_table_adj = real_time_data_table[, list(train_queue = sum (arrival_delay > 0 , departure_delay > 0 ), count (arrival_delay > 0, departure_delay > 0), freq = .N), by = c("stop_id")]
real_time_data_table_adj = real_time_data_table[, list(train_queue = sum (arrival_delay > 0 , departure_delay > 0 ), length (arrival_delay > 0, departure_delay > 0), freq = .N), by = c("stop_id")]
real_time_data_table =data.table(updates)
real_time_data_table_adj = real_time_data_table[, list(train_queue = sum (arrival_delay > 0 , departure_delay > 0 ), length (arrival_delay > 0) + length (departure_delay > 0), freq = .N), by = c("stop_id")]
head(real_time_data_table_adj)
real_time_data_table =data.table(updates)
real_time_data_table_adj = real_time_data_table[, list(train_queue = sum (arrival_delay > 0 , departure_delay > 0 ), length (arrival_delay != 0) + length (departure_delay != 0), freq = .N), by = c("stop_id")]
head(real_time_data_table_adj)
real_time_data_table =data.table(updates)
real_time_data_table_adj = real_time_data_table[, list(train_queue = sum (arrival_delay > 0 , departure_delay > 0 ), length (arrival_delay[arrival_delay != 0])+ length (departure_delay[departure_delay != 0]), freq = .N), by = c("stop_id")]
head(real_time_data_table_adj)
cbind(updates_df, real_time_data_table_adj)
updates_df = data.frame(unique_stop = unique_stop_ids, lat_coord = seq(0,0,length.out=length(stop_ids)), lon_coord = seq(0,0,length.out=length(stop_ids)) )
find_lat <- function(unique_stop){
lat = stop_coord[stop_coord$stop_id == unique_stop, 3]
return (lat)
}
find_lon <- function(unique_stop){
lon = stop_coord[stop_coord$stop_id == unique_stop, 2]
return (lon)
}
updates_df["lat_coord"] <- apply(updates_df[1], 1, find_lat)
updates_df["lon_coord"] <- apply(updates_df[1], 1, find_lon)
head(updates)
head(updates_df)
real_time_data_table =data.table(updates)
real_time_data_table_adj = real_time_data_table[, list(train_queue = sum (arrival_delay > 0 , departure_delay > 0 ), length (arrival_delay[arrival_delay != 0])+ length (departure_delay[departure_delay != 0]), freq = .N), by = c("stop_id")]
head(real_time_data_table_adj)
cbind(updates_df, real_time_data_table_adj)
head(updates)
m <- leaflet() %>%
addTiles() %>%
addPolylines(data = shape_temp)
m %>% addCircles(data = stop_coord, lat = ~ lats, lng = ~ lons)
m %>% addCircles(data = real_time_data_table_adj, lat = ~lat_coord, lng = ~lon_coord, radius = train_queue)
head(real_updates)
real_updates = cbind(updates_df, real_time_data_table_adj)
head(real_updates)
real_updates = cbind(updates_df, real_time_data_table_adj)
real_updates$lat_coord <- as.numeric(real_updates$lat_coord)
real_updates$lon_coord <- as.numeric(real_updates$lon_coord)
m <- leaflet() %>%
addTiles() %>%
addPolylines(data = shape_temp)
m %>% addCircles(data = stop_coord, lat = ~ lats, lng = ~ lons)
m %>% addCircles(data = real_updates, lat = ~lat_coord, lng = ~lon_coord, radius = train_queue)
head(real_updates)
real_updates$train_queue <- as.numeric(real_updates$train_queue)
m <- leaflet() %>%
addTiles() %>%
addPolylines(data = shape_temp)
m %>% addCircles(data = stop_coord, lat = ~ lats, lng = ~ lons)
m %>% addCircles(data = real_updates, lat = ~lat_coord, lng = ~lon_coord, radius = train_queue)
real_updates$train_queue
updates <- read.csv('/Users/sarahcha/Documents/W205/final_project/batch_data/trip_update.csv')
unique_stop_ids <- unique(updates$stop_id)
updates$arrival_delay <- as.numeric(updates$arrival_delay)
updates$departure_delay <- as.numeric(updates$departure_delay)
updates_df = data.frame(unique_stop = unique_stop_ids, lat_coord = seq(0,0,length.out=length(stop_ids)), lon_coord = seq(0,0,length.out=length(stop_ids)) )
find_lat <- function(unique_stop){
lat = stop_coord[stop_coord$stop_id == unique_stop, 3]
return (lat)
}
find_lon <- function(unique_stop){
lon = stop_coord[stop_coord$stop_id == unique_stop, 2]
return (lon)
}
updates_df["lat_coord"] <- apply(updates_df[1], 1, find_lat)
updates_df["lon_coord"] <- apply(updates_df[1], 1, find_lon)
real_time_data_table =data.table(updates)
real_time_data_table_adj = real_time_data_table[, list(train_queue = sum (arrival_delay > 0 , departure_delay > 0 ), length (arrival_delay[arrival_delay != 0])+ length (departure_delay[departure_delay != 0]), freq = .N), by = c("stop_id")]
head(real_time_data_table_adj)
real_updates = cbind(updates_df, real_time_data_table_adj)
real_updates$lat_coord <- as.numeric(real_updates$lat_coord)
real_updates$lon_coord <- as.numeric(real_updates$lon_coord)
real_updates$train_queue <- as.numeric(real_updates$train_queue)
real_updates$train_queue
m <- leaflet() %>%
addTiles() %>%
addPolylines(data = shape_temp)
m %>% addCircles(data = stop_coord, lat = ~ lats, lng = ~ lons)
m %>% addCircles(data = real_updates, lat = ~lat_coord, lng = ~lon_coord, radius = train_queue)
m <- leaflet() %>%
addTiles() %>%
addPolylines(data = shape_temp)
m %>% addCircles(data = stop_coord, lat = ~ lats, lng = ~ lons)
m %>% addCircles(data = real_updates, lat = ~lat_coord, lng = ~lon_coord, radius = ~train_queue)
real_updates$radius <- real_updates$train_queue * 10
head(real_updates)
m <- leaflet() %>%
addTiles() %>%
addPolylines(data = shape_temp)
m %>% addCircles(data = stop_coord, lat = ~ lats, lng = ~ lons)
m %>% addCircles(data = real_updates, lat = ~lat_coord, lng = ~lon_coord, radius = ~train_queue)
m <- leaflet() %>%
addTiles() %>%
addPolylines(data = shape_temp)
m %>% addCircles(data = stop_coord, lat = ~ lats, lng = ~ lons)
m %>% addCircles(data = real_updates, lat = ~lat_coord, lng = ~lon_coord, radius = ~radius)
real_updates$radius <- real_updates$train_queue * 20
m <- leaflet() %>%
addTiles() %>%
addPolylines(data = shape_temp)
m %>% addCircles(data = stop_coord, lat = ~ lats, lng = ~ lons)
m %>% addCircles(data = real_updates, lat = ~lat_coord, lng = ~lon_coord, radius = ~radius)
m <- leaflet() %>%
addTiles() %>%
addPolylines(data = shape_temp)
m %>% addCircles(data = stop_coord, lat = ~ lats, lng = ~ lons)
m %>% addCircles(data = real_updates, lat = ~lat_coord, lng = ~lon_coord, radius = ~radius, color = "yellow")
m <- leaflet() %>%
addTiles() %>%
addPolylines(data = shape_temp)
m %>% addCircles(data = stop_coord, lat = ~ lats, lng = ~ lons)
m %>% addCircleMarkers(data = real_updates, lat = ~lat_coord, lng = ~lon_coord, radius = ~radius, color = "yellow")
real_updates$radius <- real_updates$train_queue * 5
m <- leaflet() %>%
addTiles() %>%
addPolylines(data = shape_temp)
m %>% addCircles(data = stop_coord, lat = ~ lats, lng = ~ lons)
m %>% addCircleMarkers(data = real_updates, lat = ~lat_coord, lng = ~lon_coord, radius = ~radius, color = "yellow")
m <- leaflet() %>%
addTiles() %>%
addPolylines(data = shape_temp, color = 'blue')
m %>% addCircles(data = stop_coord, lat = ~ lats, lng = ~ lons)
m %>% addCircleMarkers(data = real_updates, lat = ~lat_coord, lng = ~lon_coord, radius = ~radius, color = "yellow")
runApp('Documents/W205/final_project/server.R')
runApp('Documents/W205/final_project/r_shiny/subway_plot')
install.packages("maps")
shiny::runApp()
runApp()
runApp()
runApp()
